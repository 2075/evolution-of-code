{
	"header": {
		"identifier": "lychee.crypto.MURMUR",
		"attaches": {},
		"tags": {},
		"requires": [],
		"includes": [],
		"supports": {},
		"type": "Composite"
	},
	"memory": {
		"_C1": {
			"chunk": "0xcc9e2d51",
			"type": "Number",
			"hash": "0903387d",
			"value": 3432918353
		},
		"_C1B": {
			"chunk": "0x85ebca6b",
			"type": "Number",
			"hash": "6315ddbf",
			"value": 2246822507
		},
		"_C2": {
			"chunk": "0x1b873593",
			"type": "Number",
			"hash": "17cbc604",
			"value": 461845907
		},
		"_C2B": {
			"chunk": "0xc2b2ae35",
			"type": "Number",
			"hash": "a9332383",
			"value": 3266489909
		}
	},
	"errors": [],
	"result": {
		"constructor": {
			"chunk": "function() {\n\n\t\tthis.__hash = 0;\n\n\t}",
			"type": "function",
			"hash": "2477fe51",
			"parameters": [],
			"memory": []
		},
		"states": {},
		"properties": {
			"__hash": {
				"chunk": "this.__hash = 0;",
				"type": "Number",
				"hash": "5394c661",
				"value": {
					"chunk": "0",
					"type": "Number",
					"hash": "d271c07f",
					"value": 0
				}
			}
		},
		"enums": {},
		"events": {},
		"methods": {
			"deserialize": {
				"chunk": "function(blob) {}",
				"type": "function",
				"hash": "cf6d9c5f",
				"memory": [],
				"parameters": [
					{
						"name": "blob",
						"type": "SerializationBlob",
						"value": {}
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"serialize": {
				"chunk": "function() {\n\n\t\t\treturn {\n\t\t\t\t'constructor': 'lychee.crypto.MURMUR',\n\t\t\t\t'arguments':   []\n\t\t\t};\n\n\t\t}",
				"type": "function",
				"hash": "028e0902",
				"memory": [],
				"parameters": [],
				"values": [
					{
						"chunk": "{ 'constructor': 'lychee.crypto.MURMUR',\n\t\t\t\t'arguments':   []\n\t\t\t}",
						"type": "Object",
						"value": {
							"constructor": "lychee.crypto.MURMUR",
							"arguments": []
						}
					}
				]
			},
			"update": {
				"chunk": "function(data) {\n\n\t\t\tdata = data instanceof Buffer ? data : new Buffer(data, 'utf8');\n\n\n\t\t\tlet remain = data.length % 4;\n\t\t\tlet bytes  = data.length - remain;\n\n\t\t\tlet b   = 0;\n\t\t\tlet h1  = this.__hash;\n\t\t\tlet h1b = 0;\n\t\t\tlet k1  = 0;\n\n\n\t\t\twhile (b < bytes) {\n\n\t\t\t\tk1 = ((data[b] & 0xff)) | ((data[b + 1] & 0xff) << 8) | ((data[b + 2] & 0xff) << 16) | ((data[b + 3] & 0xff) << 24);\n\t\t\t\tk1 = ((((k1 & 0xffff) * _C1) + ((((k1 >>> 16) * _C1) & 0xffff) << 16))) & 0xffffffff;\n\t\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\t\tk1 = ((((k1 & 0xffff) * _C2) + ((((k1 >>> 16) * _C2) & 0xffff) << 16))) & 0xffffffff;\n\n\t\t\t\th1 ^= k1;\n\t\t\t\th1  = (h1 << 13) | (h1 >>> 19);\n\t\t\t\th1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n\t\t\t\th1  = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n\n\t\t\t\tb += 4;\n\n\t\t\t}\n\n\n\t\t\tk1 = 0;\n\n\n\t\t\tif (remain === 3) {\n\n\t\t\t\tk1 ^= (data[b + 2] & 0xff) << 16;\n\n\t\t\t} else if (remain === 2) {\n\n\t\t\t\tk1 ^= (data[b + 1] & 0xff) << 8;\n\n\t\t\t} else if (remain === 1) {\n\n\t\t\t\tk1 ^= (data[b] & 0xff);\n\n\t\t\t\tk1 = (((k1 & 0xffff) * _C1) + ((((k1 >>> 16) * _C1) & 0xffff) << 16)) & 0xffffffff;\n\t\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\t\tk1 = (((k1 & 0xffff) * _C2) + ((((k1 >>> 16) * _C2) & 0xffff) << 16)) & 0xffffffff;\n\t\t\t\th1 ^= k1;\n\n\t\t\t}\n\n\n\t\t\th1 ^= data.length;\n\n\t\t\th1 ^= h1 >>> 16;\n\t\t\th1  = (((h1 & 0xffff) * _C1B) + ((((h1 >>> 16) * _C1B) & 0xffff) << 16)) & 0xffffffff;\n\t\t\th1 ^= h1 >>> 13;\n\t\t\th1  = (((h1 & 0xffff) * _C2B) + ((((h1 >>> 16) * _C2B) & 0xffff) << 16)) & 0xffffffff;\n\t\t\th1 ^= h1 >>> 16;\n\n\n\t\t\tthis.__hash = h1 >>> 0;\n\n\t\t}",
				"type": "function",
				"hash": "0a20a836",
				"memory": [],
				"parameters": [
					{
						"chunk": "data instanceof Buffer ? data : new Buffer(data, 'utf8')",
						"name": "data",
						"type": "Buffer"
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"digest": {
				"chunk": "function() {\n\n\t\t\tlet hash = (this.__hash).toString(16);\n\t\t\tif (hash.length % 2 === 1) {\n\t\t\t\thash = '0' + hash;\n\t\t\t}\n\n\t\t\treturn new Buffer(hash, 'hex');\n\n\t\t}",
				"type": "function",
				"hash": "061c8a79",
				"memory": [],
				"parameters": [],
				"values": [
					{
						"chunk": "new Buffer(hash, 'hex')",
						"type": "Buffer"
					}
				]
			}
		}
	}
}