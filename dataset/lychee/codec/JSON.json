{
	"header": {
		"identifier": "lychee.codec.JSON",
		"attaches": {},
		"tags": {},
		"requires": [],
		"includes": [],
		"supports": {},
		"type": "Module"
	},
	"memory": {
		"_CHARS_SEARCH": {
			"chunk": "/[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g",
			"type": "RegExp",
			"hash": "e6eb0c95",
			"value": {
				"constructor": "RegExp",
				"arguments": [
					"[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]",
					"g"
				]
			}
		},
		"_CHARS_META": {
			"chunk": "{\n\t\t'\\r': '',    // FUCK YOU, Microsoft!\n\t\t'\\b': '\\\\b',\n\t\t'\\t': '\\\\t',\n\t\t'\\n': '\\\\n',\n\t\t'\\f': '\\\\f',\n\t\t'\"':  '\\\\\"',\n\t\t'\\\\': '\\\\\\\\'\n\t}",
			"type": "Object",
			"hash": "565edd75",
			"value": {
				"\r": "",
				"\b": "\\b",
				"\t": "\\t",
				"\n": "\\n",
				"\f": "\\f",
				"\"": "\\\"",
				"\\": "\\\\"
			}
		},
		"_desanitize_string": {
			"chunk": "function(san) {\n\n\t\tlet str = san;\n\n\t\t// str = str.replace(/\\\\b/g, '\\b');\n\t\t// str = str.replace(/\\\\f/g, '\\f');\n\t\tstr = str.replace(/\\\\t/g, '\\t');\n\t\tstr = str.replace(/\\\\n/g, '\\n');\n\t\tstr = str.replace(/\\\\\\\\/g, '\\\\');\n\n\t\treturn str;\n\n\t}",
			"type": "function",
			"hash": "eb2374fb",
			"memory": [],
			"parameters": [
				{
					"chunk": null,
					"name": "san",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_sanitize_string": {
			"chunk": "function(str) {\n\n\t\tlet san = str;\n\n\t\tif (_CHARS_SEARCH.test(san)) {\n\n\t\t\tsan = san.replace(_CHARS_SEARCH, function(char) {\n\n\t\t\t\tlet meta = _CHARS_META[char];\n\t\t\t\tif (meta !== undefined) {\n\t\t\t\t\treturn meta;\n\t\t\t\t} else {\n\t\t\t\t\treturn '\\\\u' + (char.charCodeAt(0).toString(16)).slice(-4);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t}\n\n\t\treturn san;\n\n\t}",
			"type": "function",
			"hash": "f5737fda",
			"memory": [
				"_CHARS_META",
				"_CHARS_SEARCH"
			],
			"parameters": [
				{
					"chunk": null,
					"name": "str",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_Stream": {
			"chunk": "function(buffer) {\n\n\t\tthis.__buffer = typeof buffer === 'string' ? buffer : '';\n\t\tthis.__index  = 0;\n\n\t}",
			"type": "function",
			"hash": "7f26013b",
			"memory": [],
			"parameters": [
				{
					"chunk": null,
					"name": "buffer",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_encode": {
			"chunk": "function(stream, data) {\n\n\t\t// Boolean, Null (or EOS), Undefined, Infinity, NaN\n\t\tif (\n\t\t\ttypeof data === 'boolean'\n\t\t\t|| data === null\n\t\t\t|| data === undefined\n\t\t\t|| (\n\t\t\t\ttypeof data === 'number'\n\t\t\t\t&& (\n\t\t\t\t\tdata === Infinity\n\t\t\t\t\t|| data === -Infinity\n\t\t\t\t\t|| isNaN(data) === true\n\t\t\t\t)\n\t\t\t)\n\t\t) {\n\n\t\t\tif (data === null) {\n\t\t\t\tstream.write('null');\n\t\t\t} else if (data === undefined) {\n\t\t\t\tstream.write('undefined');\n\t\t\t} else if (data === false) {\n\t\t\t\tstream.write('false');\n\t\t\t} else if (data === true) {\n\t\t\t\tstream.write('true');\n\t\t\t} else if (data === Infinity) {\n\t\t\t\tstream.write('Infinity');\n\t\t\t} else if (data === -Infinity) {\n\t\t\t\tstream.write('-Infinity');\n\t\t\t} else if (isNaN(data) === true) {\n\t\t\t\tstream.write('NaN');\n\t\t\t}\n\n\n\t\t// 123, 12.3: Integer or Float\n\t\t} else if (typeof data === 'number') {\n\n\t\t\tlet type = 1;\n\t\t\tif (data < 268435456 && data !== (data | 0)) {\n\t\t\t\ttype = 2;\n\t\t\t}\n\n\n\t\t\t// Negative value\n\t\t\tlet sign = 0;\n\t\t\tif (data < 0) {\n\t\t\t\tdata = -data;\n\t\t\t\tsign = 1;\n\t\t\t}\n\n\n\t\t\tif (sign === 1) {\n\t\t\t\tstream.write('-');\n\t\t\t}\n\n\n\t\t\tif (type === 1) {\n\t\t\t\tstream.write('' + data.toString());\n\t\t\t} else {\n\t\t\t\tstream.write('' + data.toString());\n\t\t\t}\n\n\n\t\t// \"\": String\n\t\t} else if (typeof data === 'string') {\n\n\t\t\tdata = _sanitize_string(data);\n\n\n\t\t\tstream.write('\"');\n\n\t\t\tstream.write(data);\n\n\t\t\tstream.write('\"');\n\n\n\t\t// []: Array\n\t\t} else if (data instanceof Array) {\n\n\t\t\tstream.write('[');\n\n\t\t\tfor (let d = 0, dl = data.length; d < dl; d++) {\n\n\t\t\t\t_encode(stream, data[d]);\n\n\t\t\t\tif (d < dl - 1) {\n\t\t\t\t\tstream.write(',');\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstream.write(']');\n\n\n\t\t// {}: Object\n\t\t} else if (data instanceof Object && typeof data.serialize !== 'function') {\n\n\t\t\tstream.write('{');\n\n\t\t\tlet keys = Object.keys(data);\n\n\t\t\tfor (let k = 0, kl = keys.length; k < kl; k++) {\n\n\t\t\t\tlet key = keys[k];\n\n\t\t\t\t_encode(stream, key);\n\t\t\t\tstream.write(':');\n\n\t\t\t\t_encode(stream, data[key]);\n\n\t\t\t\tif (k < kl - 1) {\n\t\t\t\t\tstream.write(',');\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstream.write('}');\n\n\n\t\t// Custom High-Level Implementation\n\t\t} else if (data instanceof Object && typeof data.serialize === 'function') {\n\n\t\t\tstream.write('%');\n\n\t\t\tlet blob = lychee.serialize(data);\n\n\t\t\t_encode(stream, blob);\n\n\t\t\tstream.write('%');\n\n\t\t}\n\n\t}",
			"type": "function",
			"hash": "73061a3c",
			"memory": [
				"_encode",
				"_sanitize_string"
			],
			"parameters": [
				{
					"chunk": null,
					"name": "stream",
					"type": "undefined"
				},
				{
					"chunk": null,
					"name": "data",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_decode": {
			"chunk": "function(stream) {\n\n\t\tlet value  = undefined;\n\t\tlet seek   = '';\n\t\tlet size   = 0;\n\t\tlet errors = 0;\n\t\tlet check  = null;\n\n\n\t\tif (stream.pointer() < stream.length()) {\n\n\t\t\tseek = stream.seek(1);\n\n\n\t\t\t// Boolean, Null (or EOS), Undefined, Infinity, NaN\n\t\t\tif (stream.seek(4) === 'null') {\n\t\t\t\tstream.read(4);\n\t\t\t\tvalue = null;\n\t\t\t} else if (stream.seek(9) === 'undefined') {\n\t\t\t\tstream.read(9);\n\t\t\t\tvalue = undefined;\n\t\t\t} else if (stream.seek(5) === 'false') {\n\t\t\t\tstream.read(5);\n\t\t\t\tvalue = false;\n\t\t\t} else if (stream.seek(4) === 'true') {\n\t\t\t\tstream.read(4);\n\t\t\t\tvalue = true;\n\t\t\t} else if (stream.seek(8) === 'Infinity') {\n\t\t\t\tstream.read(8);\n\t\t\t\tvalue = Infinity;\n\t\t\t} else if (stream.seek(9) === '-Infinity') {\n\t\t\t\tstream.read(9);\n\t\t\t\tvalue = -Infinity;\n\t\t\t} else if (stream.seek(3) === 'NaN') {\n\t\t\t\tstream.read(3);\n\t\t\t\tvalue = NaN;\n\n\n\t\t\t// 123, 12.3: Number\n\t\t\t} else if (seek === '-' || isNaN(parseInt(seek, 10)) === false) {\n\n\t\t\t\tsize = stream.search([ ',', ']', '}' ]);\n\n\t\t\t\tif (size > 0) {\n\n\t\t\t\t\tlet tmp = stream.read(size);\n\t\t\t\t\tif (tmp.indexOf('.') !== -1) {\n\t\t\t\t\t\tvalue = parseFloat(tmp, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = parseInt(tmp, 10);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t// \"\": String\n\t\t\t} else if (seek === '\"') {\n\n\t\t\t\tstream.read(1);\n\n\t\t\t\tsize = stream.search([ '\"' ]);\n\n\t\t\t\tif (size > 0) {\n\t\t\t\t\tvalue = stream.read(size);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '';\n\t\t\t\t}\n\n\n\t\t\t\tcheck = stream.read(1);\n\n\n\t\t\t\tlet unichar = stream.seek(-2);\n\n\t\t\t\twhile (check === '\"' && unichar.charAt(0) === '\\\\') {\n\n\t\t\t\t\tif (value.charAt(value.length - 1) === '\\\\') {\n\t\t\t\t\t\tvalue = value.substr(0, value.length - 1) + check;\n\t\t\t\t\t}\n\n\t\t\t\t\tsize    = stream.search([ '\"' ]);\n\t\t\t\t\tvalue  += stream.read(size);\n\t\t\t\t\tcheck   = stream.read(1);\n\t\t\t\t\tunichar = stream.seek(-2);\n\n\t\t\t\t}\n\n\t\t\t\tvalue = _desanitize_string(value);\n\n\t\t\t// []: Array\n\t\t\t} else if (seek === '[') {\n\n\t\t\t\tvalue = [];\n\n\n\t\t\t\tsize  = stream.search([ ']' ]);\n\t\t\t\tcheck = stream.read(1).trim() + stream.seek(size).trim();\n\n\t\t\t\tif (check !== '[]') {\n\n\t\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\t\tvalue.push(_decode(stream));\n\n\t\t\t\t\t\tcheck = stream.seek(1);\n\n\t\t\t\t\t\tif (check === ',') {\n\t\t\t\t\t\t\tstream.read(1);\n\t\t\t\t\t\t} else if (check === ']') {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terrors++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstream.read(1);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstream.read(size);\n\n\t\t\t\t}\n\n\n\t\t\t// {}: Object\n\t\t\t} else if (seek === '{') {\n\n\t\t\t\tvalue = {};\n\n\n\t\t\t\tstream.read(1);\n\n\t\t\t\twhile (errors === 0) {\n\n\t\t\t\t\tif (stream.seek(1) === '}') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tlet object_key = _decode(stream);\n\t\t\t\t\tcheck = stream.seek(1);\n\n\t\t\t\t\tif (check === '}') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (check === ':') {\n\t\t\t\t\t\tstream.read(1);\n\t\t\t\t\t} else if (check !== ':') {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet object_value = _decode(stream);\n\t\t\t\t\tcheck = stream.seek(1);\n\n\n\t\t\t\t\tvalue[object_key] = object_value;\n\n\n\t\t\t\t\tif (check === '}') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (check === ',') {\n\t\t\t\t\t\tstream.read(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstream.read(1);\n\n\t\t\t// %%: Custom High-Level Implementation\n\t\t\t} else if (seek === '%') {\n\n\t\t\t\tstream.read(1);\n\n\t\t\t\tlet blob = _decode(stream);\n\n\t\t\t\tvalue = lychee.deserialize(blob);\n\t\t\t\tcheck = stream.read(1);\n\n\t\t\t\tif (check !== '%') {\n\t\t\t\t\tvalue = undefined;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Invalid seek, assume it's a space character\n\n\t\t\t\tstream.read(1);\n\t\t\t\treturn _decode(stream);\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn value;\n\n\t}",
			"type": "function",
			"hash": "a362b10b",
			"memory": [
				"_decode",
				"_desanitize_string"
			],
			"parameters": [
				{
					"chunk": null,
					"name": "stream",
					"type": "undefined"
				}
			],
			"values": [
				{
					"chunk": "_decode(stream)",
					"type": "undefined"
				},
				{
					"chunk": "null",
					"type": "null",
					"value": null
				},
				{
					"chunk": "false",
					"type": "Boolean",
					"value": false
				},
				{
					"chunk": "true",
					"type": "Boolean",
					"value": true
				},
				{
					"chunk": "Infinity",
					"type": "Number",
					"value": "Infinity"
				},
				{
					"chunk": "''",
					"type": "String",
					"value": ""
				},
				{
					"chunk": "value.substr(0, value.length - 1) + check",
					"type": "String",
					"value": "<string>"
				},
				{
					"chunk": "[]",
					"type": "Array",
					"value": []
				},
				{
					"chunk": "{}",
					"type": "Object",
					"value": {}
				}
			]
		}
	},
	"errors": [],
	"result": {
		"constructor": {},
		"states": {},
		"properties": {},
		"enums": {},
		"events": {},
		"methods": {
			"deserialize": {
				"chunk": "function(blob) {}",
				"type": "function",
				"hash": "cf6d9c5f",
				"parameters": [
					{
						"name": "blob",
						"type": "SerializationBlob",
						"value": {}
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"serialize": {
				"chunk": "function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'lychee.codec.JSON',\n\t\t\t\t'blob':      null\n\t\t\t};\n\n\t\t}",
				"type": "function",
				"hash": "55e69893",
				"memory": [],
				"parameters": [],
				"values": [
					{
						"chunk": "{ 'reference': 'lychee.codec.JSON',\n\t\t\t\t'blob':      null\n\t\t\t}",
						"type": "Object",
						"value": {
							"reference": "lychee.codec.JSON",
							"blob": null
						}
					}
				]
			},
			"encode": {
				"chunk": "function(data) {\n\n\t\t\tdata = data instanceof Object ? data : null;\n\n\n\t\t\tif (data !== null) {\n\n\t\t\t\tlet stream = new _Stream('');\n\n\t\t\t\t_encode(stream, data);\n\n\t\t\t\treturn new Buffer(stream.toString(), 'utf8');\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t}",
				"type": "function",
				"hash": "7323ed09",
				"memory": [
					"_encode"
				],
				"parameters": [
					{
						"chunk": "data instanceof Object ? data : null",
						"name": "data",
						"type": "Object",
						"value": null
					}
				],
				"values": [
					{
						"chunk": "new Buffer(stream.toString(), 'utf8')",
						"type": "Buffer"
					},
					{
						"chunk": "null",
						"type": "null",
						"value": null
					}
				]
			},
			"decode": {
				"chunk": "function(data) {\n\n\t\t\tdata = data instanceof Buffer ? data : null;\n\n\n\t\t\tif (data !== null) {\n\n\t\t\t\tlet stream = new _Stream(data.toString('utf8'));\n\t\t\t\tlet object = _decode(stream);\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t}",
				"type": "function",
				"hash": "5be01c5f",
				"memory": [
					"_decode"
				],
				"parameters": [
					{
						"chunk": "data instanceof Buffer ? data : null",
						"name": "data",
						"type": "Buffer",
						"value": null
					}
				],
				"values": [
					{
						"chunk": "object",
						"type": "Object",
						"value": {}
					},
					{
						"chunk": "null",
						"type": "null",
						"value": null
					}
				]
			}
		}
	}
}