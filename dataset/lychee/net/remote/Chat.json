{
	"header": {
		"identifier": "lychee.net.remote.Chat",
		"attaches": {},
		"tags": {},
		"requires": [],
		"includes": [
			"lychee.net.Service"
		],
		"supports": {},
		"type": "Composite"
	},
	"memory": {
		"_Service": {
			"chunk": "lychee.import('lychee.net.Service')",
			"type": "lychee.Definition",
			"hash": "1de466ca",
			"value": {
				"reference": "lychee.net.Service",
				"arguments": []
			}
		},
		"_CHATS": {
			"chunk": "{}",
			"type": "Object",
			"hash": "30f4c306",
			"value": {}
		},
		"_on_disconnect": {
			"chunk": "function() {\n\n\t\tfor (let rId in _CHATS) {\n\n\t\t\tlet index = _CHATS[rId].tunnels.indexOf(this.tunnel);\n\t\t\tif (index !== -1) {\n\t\t\t\t_CHATS[rId].users.splice(index, 1);\n\t\t\t\t_CHATS[rId].tunnels.splice(index, 1);\n\t\t\t\t_sync_chat.call(this, _CHATS[rId]);\n\t\t\t}\n\n\t\t}\n\n\t}",
			"type": "function",
			"hash": "8a862729",
			"parameters": [],
			"values": []
		},
		"_on_sync": {
			"chunk": "function(data) {\n\n\t\tlet user = data.user || null;\n\t\tlet room = data.room || null;\n\t\tif (user !== null && room !== null) {\n\n\t\t\t// 1. Create Room\n\t\t\tlet chat = _CHATS[room] || null;\n\t\t\tif (chat === null) {\n\n\t\t\t\tchat = _CHATS[room] = {\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tusers:    [ user ],\n\t\t\t\t\ttunnels:  [ this.tunnel ]\n\t\t\t\t};\n\n\t\t\t// 2. Join Room\n\t\t\t} else {\n\n\t\t\t\tlet tid = chat.tunnels.indexOf(this.tunnel);\n\t\t\t\tif (tid === -1) {\n\t\t\t\t\tchat.tunnels.push(this.tunnel);\n\t\t\t\t\tchat.users.push(user);\n\t\t\t\t} else {\n\t\t\t\t\tchat.users[tid] = user;\n\t\t\t\t}\n\n\n\t\t\t\t_sync_chat.call(this, chat);\n\n\t\t\t}\n\n\n\t\t\t// 3. Leave Room (only one at a time allowed)\n\t\t\tfor (let rId in _CHATS) {\n\n\t\t\t\tif (rId === room) continue;\n\n\t\t\t\tlet index = _CHATS[rId].tunnels.indexOf(this.tunnel);\n\t\t\t\tif (index !== -1) {\n\n\t\t\t\t\t_CHATS[rId].users.splice(index, 1);\n\t\t\t\t\t_CHATS[rId].tunnels.splice(index, 1);\n\n\t\t\t\t\t_sync_chat.call(this, _CHATS[rId]);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}",
			"type": "function",
			"hash": "62ca7395",
			"parameters": [
				{
					"chunk": null,
					"name": "data",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_on_message": {
			"chunk": "function(data) {\n\n\t\tlet user    = data.user    || null;\n\t\tlet room    = data.room    || null;\n\t\tlet message = data.message || null;\n\t\tif (user !== null && room !== null && message !== null) {\n\n\t\t\tlet chat = _CHATS[room] || null;\n\t\t\tif (chat !== null) {\n\n\t\t\t\tlet limit = this.limit;\n\t\t\t\tif (chat.messages.length > limit - 1) {\n\t\t\t\t\tchat.messages.splice(0, 1);\n\t\t\t\t}\n\n\t\t\t\tchat.messages.push({\n\t\t\t\t\tuser:    user,\n\t\t\t\t\tmessage: message\n\t\t\t\t});\n\n\n\t\t\t\t_sync_chat.call(this, chat);\n\n\t\t\t}\n\n\t\t}\n\n\t}",
			"type": "function",
			"hash": "63a4dbf4",
			"parameters": [
				{
					"chunk": null,
					"name": "data",
					"type": "undefined"
				}
			],
			"values": []
		},
		"_sync_chat": {
			"chunk": "function(chat) {\n\n\t\tlet data = {\n\t\t\tmessages: chat.messages,\n\t\t\tusers:    chat.users\n\t\t};\n\n\n\t\tfor (let t = 0, tl = chat.tunnels.length; t < tl; t++) {\n\n\t\t\tlet tunnel = chat.tunnels[t];\n\t\t\tif (tunnel !== null) {\n\n\t\t\t\ttunnel.send(data, {\n\t\t\t\t\tid:    this.id,\n\t\t\t\t\tevent: 'sync'\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t}",
			"type": "function",
			"hash": "96c1252d",
			"parameters": [
				{
					"chunk": null,
					"name": "chat",
					"type": "undefined"
				}
			],
			"values": []
		}
	},
	"errors": [],
	"result": {
		"constructor": {
			"chunk": "function(id, remote, data) {\n\n\t\tid = typeof id === 'string' ? id : 'chat';\n\n\n\t\tlet states = Object.assign({}, data);\n\n\n\t\tthis.limit = 128;\n\n\n\t\tthis.setLimit(states.limit);\n\n\t\tdelete states.limit;\n\n\n\t\t_Service.call(this, id, remote, _Service.TYPE.remote);\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tthis.bind('sync',    _on_sync,    this);\n\t\tthis.bind('message', _on_message, this);\n\n\t\tthis.tunnel.bind('disconnect', _on_disconnect, this);\n\n\n\t\tstates = null;\n\n\t}",
			"type": "function",
			"hash": "700a7fea",
			"parameters": [
				{
					"chunk": "typeof id === 'string' ? id : 'chat'",
					"name": "id",
					"type": "String",
					"value": "chat"
				},
				{
					"chunk": null,
					"name": "remote",
					"type": "undefined"
				},
				{
					"chunk": null,
					"name": "data",
					"type": "undefined"
				}
			]
		},
		"states": {
			"limit": "setLimit"
		},
		"properties": {
			"limit": {
				"chunk": "this.limit = 128;",
				"type": "Number",
				"hash": "9aeb34da",
				"value": {
					"chunk": "128",
					"type": "Number",
					"hash": "85f0b427",
					"value": 128
				}
			}
		},
		"enums": {},
		"events": {},
		"methods": {
			"deserialize": {
				"chunk": "function(blob) {}",
				"type": "function",
				"hash": "cf6d9c5f",
				"parameters": [
					{
						"name": "blob",
						"type": "SerializationBlob",
						"value": {}
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"serialize": {
				"chunk": "function() {\n\n\t\t\tlet data = _Service.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.net.remote.Chat';\n\n\t\t\tlet states = {};\n\t\t\tlet blob   = (data['blob'] || {});\n\n\n\t\t\tif (this.limit !== 128) states.limit = this.limit;\n\n\n\t\t\tdata['arguments'] = [ this.id, null, states ];\n\t\t\tdata['blob']      = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t}",
				"type": "function",
				"hash": "4418f5cd",
				"parameters": [],
				"values": [
					{
						"chunk": "{ 'constructor': 'lychee.event.Emitter',\n\t\t\t\t'arguments':   [],\n\t\t\t\t'blob':        Object.keys(blob).length > 0 ? blob : null\n\t\t\t}",
						"type": "Object",
						"value": {}
					}
				]
			},
			"setLimit": {
				"chunk": "function(limit) {\n\n\t\t\tlimit = typeof limit === 'number' ? limit : null;\n\n\n\t\t\tif (limit !== null) {\n\n\t\t\t\tthis.limit = limit;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}",
				"type": "function",
				"hash": "1899c812",
				"parameters": [
					{
						"chunk": "typeof limit === 'number' ? limit : null",
						"name": "limit",
						"type": "Number",
						"value": null
					}
				],
				"values": [
					{
						"chunk": "true",
						"type": "Boolean",
						"value": true
					},
					{
						"chunk": "false",
						"type": "Boolean",
						"value": false
					}
				]
			}
		}
	}
}