{
	"header": {
		"identifier": "lychee.verlet.Entity",
		"attaches": {},
		"tags": {},
		"requires": [
			"lychee.math.Vector3",
			"lychee.verlet.Constraint"
		],
		"includes": [
			"lychee.app.Entity"
		],
		"supports": {},
		"type": "Composite"
	},
	"memory": {
		"_Constraint": {
			"chunk": "lychee.import('lychee.verlet.Constraint')",
			"type": "lychee.Definition",
			"hash": "be10a11c",
			"value": {
				"reference": "lychee.verlet.Constraint",
				"arguments": []
			}
		},
		"_Entity": {
			"chunk": "lychee.import('lychee.app.Entity')",
			"type": "lychee.Definition",
			"hash": "fb88a2da",
			"value": {
				"reference": "lychee.app.Entity",
				"arguments": []
			}
		},
		"_Vector3": {
			"chunk": "lychee.import('lychee.math.Vector3')",
			"type": "lychee.Definition",
			"hash": "0ab205ed",
			"value": {
				"reference": "lychee.math.Vector3",
				"arguments": []
			}
		},
		"_on_change": {
			"chunk": "function() {\n\n\t\tlet constraints = [];\n\t\tlet particles   = [ this.position ];\n\t\tlet rigidity    = this.rigidity;\n\t\tlet shape       = this.shape;\n\n\n\t\tif (shape === Composite.SHAPE.circle) {\n\n\t\t\tlet origin   = new _Vector3(this.position);\n\t\t\tlet radius   = this.radius;\n\t\t\tlet segments = Math.min(64, Math.max(4, Math.pow(radius / 8, 2)));\n\t\t\tlet s        = 0;\n\n\t\t\tfor (s = 0; s < segments; s++) {\n\n\t\t\t\tlet theta = s * (2 * Math.PI) / segments;\n\n\t\t\t\tparticles.push(new _Vector3({\n\t\t\t\t\tx: origin.x + Math.cos(theta) * radius,\n\t\t\t\t\ty: origin.y + Math.sin(theta) * radius,\n\t\t\t\t\tz: 0\n\t\t\t\t}));\n\n\t\t\t}\n\n\t\t\tfor (s = 0; s < segments; s++) {\n\n\t\t\t\tlet curr = particles[s % segments];\n\t\t\t\tlet prev = particles[(s - 1) % segments] || null;\n\t\t\t\tlet next = particles[(s + 1) % segments] || null;\n\n\n\t\t\t\tif (curr !== prev && prev !== null) {\n\t\t\t\t\tconstraints.push(new _Constraint(curr, prev, rigidity));\n\t\t\t\t}\n\n\t\t\t\tif (curr !== next && next !== null) {\n\t\t\t\t\tconstraints.push(new _Constraint(curr, next, rigidity));\n\t\t\t\t}\n\n\t\t\t\tconstraints.push(new _Constraint(curr, origin, rigidity));\n\n\t\t\t}\n\n\n\t\t// TODO: Implement this stuff here\n\t\t// } else if (shape === Composite.SHAPE.sphere) {\n\t\t// } else if (shape === Composite.SHAPE.rectangle) {\n\t\t// } else if (shape === Composite.SHAPE.cuboid) {\n\t\t}\n\n\n\t\tthis.constraints = constraints;\n\t\tthis.particles   = particles;\n\n\t}",
			"type": "function",
			"hash": "53e2e634",
			"parameters": [],
			"values": []
		}
	},
	"errors": [],
	"result": {
		"constructor": {
			"chunk": "function(data) {\n\n\t\tlet states = Object.assign({}, data);\n\n\n\t\tthis.constraints = [];\n\t\tthis.particles   = [];\n\t\tthis.rigidity    = 1;\n\n\n\t\tthis.setRigidity(states.rigidity);\n\n\t\tdelete states.rigidity;\n\n\n\t\t_Entity.call(this, states);\n\n\t\tstates = null;\n\n\t}",
			"type": "function",
			"hash": "6e73b1d9",
			"parameters": [
				{
					"chunk": null,
					"name": "data",
					"type": "Object"
				}
			]
		},
		"states": {
			"rigidity": "setRigidity"
		},
		"properties": {
			"constraints": {
				"chunk": "this.constraints = [];",
				"type": "Array",
				"hash": "bded7397",
				"value": {
					"chunk": "[]",
					"type": "Array",
					"hash": "30f4c306",
					"value": []
				}
			},
			"particles": {
				"chunk": "this.particles   = [];",
				"type": "Array",
				"hash": "eca2cd08",
				"value": {
					"chunk": "[]",
					"type": "Array",
					"hash": "30f4c306",
					"value": []
				}
			},
			"rigidity": {
				"chunk": "this.rigidity    = 1;",
				"type": "Number",
				"hash": "1a7fe8fb",
				"value": {
					"chunk": "1",
					"type": "Number",
					"hash": "9416ac93",
					"value": 1
				}
			}
		},
		"enums": {
			"SHAPE": {
				"values": [
					{
						"name": "circle",
						"value": {
							"chunk": "0",
							"type": "Number",
							"hash": "d271c07f",
							"value": 0
						}
					},
					{
						"name": "rectangle",
						"value": {
							"chunk": "1",
							"type": "Number",
							"hash": "9416ac93",
							"value": 1
						}
					},
					{
						"name": "sphere",
						"value": {
							"chunk": "2",
							"type": "Number",
							"hash": "0129e217",
							"value": 2
						}
					},
					{
						"name": "cuboid",
						"value": {
							"chunk": "3",
							"type": "Number",
							"hash": "0fc7a1b4",
							"value": 3
						}
					}
				]
			}
		},
		"events": {},
		"methods": {
			"deserialize": {
				"chunk": "function(blob) {}",
				"type": "function",
				"hash": "cf6d9c5f",
				"parameters": [
					{
						"name": "blob",
						"type": "SerializationBlob",
						"value": {}
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"serialize": {
				"chunk": "function() {\n\n\t\t\tlet data = _Entity.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.verlet.Entity';\n\n\t\t\tlet states = data['arguments'][0];\n\t\t\tlet blob   = (data['blob'] || {});\n\n\n\t\t\tif (this.position.length() > 0) states.position = lychee.serialize(this.position);\n\n\n\t\t\tdata['blob'] = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t}",
				"type": "function",
				"hash": "1c45a74a",
				"parameters": [],
				"values": [
					{
						"chunk": "{ 'constructor': 'lychee.app.Entity',\n\t\t\t\t'arguments':   [ states ],\n\t\t\t\t'blob':        null\n\t\t\t}",
						"type": "Object",
						"value": {}
					}
				]
			},
			"update": {
				"chunk": "function(clock, delta) {\n\n\t\t\t_Entity.prototype.update.call(this, clock, delta);\n\n\n\t\t\tlet constraints = this.constraints;\n\t\t\tfor (let c = 0, cl = constraints.length; c < cl; c++) {\n\t\t\t\tconstraints[c].update(clock, delta);\n\t\t\t}\n\n\t\t}",
				"type": "function",
				"hash": "c0530133",
				"parameters": [
					{
						"chunk": null,
						"name": "clock",
						"type": "undefined"
					},
					{
						"chunk": null,
						"name": "delta",
						"type": "undefined"
					}
				],
				"values": [
					{
						"type": "undefined"
					}
				]
			},
			"setPosition": {
				"chunk": "function(position) {\n\n\t\t\tposition = position instanceof _Vector3 ? position : null;\n\n\n\t\t\tif (position !== null) {\n\n\t\t\t\tthis.position = position;\n\t\t\t\t_on_change.call(this);\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}",
				"type": "function",
				"hash": "72e6700c",
				"parameters": [
					{
						"chunk": "position instanceof _Vector3 ? position : null",
						"name": "position",
						"type": "_Vector3",
						"value": null
					}
				],
				"values": [
					{
						"chunk": "true",
						"type": "Boolean",
						"value": true
					},
					{
						"chunk": "false",
						"type": "Boolean",
						"value": false
					}
				]
			},
			"setRigidity": {
				"chunk": "function(rigidity) {\n\n\t\t\trigidity = typeof rigidity === 'number' ? rigidity : null;\n\n\n\t\t\tif (rigidity !== null) {\n\n\t\t\t\tthis.rigidity = rigidity;\n\t\t\t\t_on_change.call(this);\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}",
				"type": "function",
				"hash": "6f2a233c",
				"parameters": [
					{
						"chunk": "typeof rigidity === 'number' ? rigidity : null",
						"name": "rigidity",
						"type": "Number",
						"value": null
					}
				],
				"values": [
					{
						"chunk": "true",
						"type": "Boolean",
						"value": true
					},
					{
						"chunk": "false",
						"type": "Boolean",
						"value": false
					}
				]
			},
			"setShape": {
				"chunk": "function(shape) {\n\n\t\t\tshape = lychee.enumof(Composite.SHAPE, shape) ? shape : null;\n\n\n\t\t\tif (shape !== null) {\n\n\t\t\t\tthis.shape = shape;\n\t\t\t\t_on_change.call(this);\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\n\t\t}",
				"type": "function",
				"hash": "13caa161",
				"parameters": [
					{
						"chunk": "lychee.enumof(Composite.SHAPE, shape) ? shape : null",
						"name": "shape",
						"type": "Enum",
						"value": "Composite.SHAPE"
					}
				],
				"values": [
					{
						"chunk": "true",
						"type": "Boolean",
						"value": true
					},
					{
						"chunk": "false",
						"type": "Boolean",
						"value": false
					}
				]
			}
		}
	}
}